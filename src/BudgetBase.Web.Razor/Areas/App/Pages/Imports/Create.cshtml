@page
@model BudgetBase.Web.Razor.Areas.App.Pages.Imports.ImportCreateModel

@{
    ViewData["Title"] = "New Import";
}

<div class="d-md-flex justify-content-between align-items-center">
    <h5 class="mb-0  d-none d-lg-block">@ViewData["Title"]</h5>

    @await Component.InvokeAsync("Breadcrumb", new { breadcrumbModels = Model.Breadcrumbs })
</div>
<div class="row">
    <div class="col-md-12 mt-4">
        <div class="card rounded shadow">
            <div class="p-4 border-bottom">
                <h5 class="title mb-0">Import</h5>
            </div>
            <div class="card-body">
                <form method="post" enctype="multipart/form-data">
                    <div class="col-md-6 mb-3">
                        <div class="form-floating">
                            <select asp-for="Import.CountryId" class="form-control" asp-items="@(ViewData["CountryId"] as SelectList)" onchange="updateBanks(this.value)">
                                <option value=""></option>
                            </select>
                            <label asp-for="Import.CountryId" class="control-label"></label>
                            <span asp-validation-for="Import.CountryId" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="form-floating">
                            <select asp-for="Import.BankId" class="form-control" asp-items="@(ViewData["BankId"] as SelectList)">
                                <option value=""></option>
                            </select>
                            <label asp-for="Import.BankId" class="control-label"></label>
                            <span asp-validation-for="Import.BankId" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="form-floating">
                            <select asp-for="Import.SourceAccountId" class="form-control" asp-items="@(ViewData["SourceAccountId"] as SelectList)">
                                <option value=""></option>
                            </select>
                            <label asp-for="Import.SourceAccountId" class="control-label"></label>
                            <span asp-validation-for="Import.SourceAccountId" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="form-floating">
                            <input asp-for="Import.File" class="form-control" accept=".csv, .xlsx" />
                            <label asp-for="Import.File" class="control-label"></label>
                            <span asp-validation-for="Import.File" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="form-floating">
                            <div class="form-check">
                                <input asp-for="Import.InsertDuplicates" class="form-check-input" id="insertDuplicates" type="checkbox">
                                <label class="form-check-label" for="insertDuplicates" asp-for="Import.InsertDuplicates">
                                </label>
                                <span asp-validation-for="Import.InsertDuplicates" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <div class="form-floating">
                            <div class="form-check">
                                <input asp-for="Import.IgnoreRules" class="form-check-input" id="ignoreRules" type="checkbox">
                                <label class="form-check-label" for="ignoreRules" asp-for="Import.IgnoreRules">
                                </label>
                                <span asp-validation-for="Import.IgnoreRules" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <div class="form-group mt-4">
                        <input type="submit" value="Confirm" class="btn btn-primary" />
                        <a class="btn btn-outline-primary" asp-page="./Index">Back to List</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        function updateBanks(countryId) {
            const bankSelect = document.querySelector('select[name="Import.BankId"]');
            bankSelect.innerHTML = '';

            // Construct FormData and append the file
            const formData = new FormData();
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Append the RequestVerificationToken to the FormData
            formData.append('__RequestVerificationToken', token);
            formData.append('countryId', countryId);

            // Make a POST request to the Razor page's action
            fetch('create?handler=FillBanksSelectList', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    // Add empty option first
                    const emptyOptionElement = document.createElement('option');
                    emptyOptionElement.value = '';
                    emptyOptionElement.textContent = '';
                    bankSelect.appendChild(emptyOptionElement);

                    // Update the select list with the received options
                    for (const option of data) {
                        const optionElement = document.createElement('option');
                        optionElement.value = option.value;
                        optionElement.textContent = option.text;
                        bankSelect.appendChild(optionElement);
                    }
                })
                .catch(error => {
                    console.error(error);
                });
        }
    </script>
}
